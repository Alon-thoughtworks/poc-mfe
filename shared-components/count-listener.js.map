{"version":3,"file":"count-listener.js","sourceRoot":"","sources":["src/count-listener.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAC,MAAM,KAAK,CAAC;AACrC,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAG1D,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,UAAU;IAA7C;;QAEE,UAAK,GAAG,CAAC,CAAC;IAiBZ,CAAC;IAfU,MAAM;QACb,OAAO,IAAI,CAAA;6BACc,IAAI,CAAC,KAAK;;;;KAIlC,CAAC;IACJ,CAAC;IAEQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,CAAC,CAAM,EAAE,EAAE;YAChD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAC9B,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjBC;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;4CACf;AAFC,aAAa;IADzB,aAAa,CAAC,gBAAgB,CAAC;GACnB,aAAa,CAmBzB;SAnBY,aAAa","sourcesContent":["import {LitElement, html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('count-listener')\nexport class CountListener extends LitElement {\n  @property({type: Number})\n  count = 0;\n\n  override render() {\n    return html`\n      <div>Listened Count: ${this.count}</div>\n      <div>\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  override connectedCallback(){\n    super.connectedCallback();\n    this.addEventListener('count-changed', (e: any) => {\n      this.count = e.detail.count;\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'count-listener': CountListener;\n  }\n}\n"]}